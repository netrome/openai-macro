//! Calculator example using LLImp (Large Language Implementation).
//!
//! This example shows how to use the llimp macro to generate method implementations.
//! By default, it uses Ollama running locally - no API key needed!
//!
//! Setup:
//! 1. Install Ollama: https://ollama.com
//! 2. Start server: ollama serve
//! 3. Pull model: ollama pull gemma3:latest
//! 4. Run: cargo run -p calculator

use calculator::{BasicCalculator, Calculator, SimpleTextProcessor, TextProcessor};

fn main() {
    println!("ü¶ô LLImp Calculator Example");
    println!("============================");
    println!();

    // Test calculator
    let calc = BasicCalculator;
    println!("üßÆ Calculator operations:");
    println!("  5 + 3 = {}", calc.add(5, 3));
    println!("  10 - 4 = {}", calc.subtract(10, 4));
    println!("  6 * 7 = {}", calc.multiply(6, 7));
    println!("  15 / 3 = {:?}", calc.divide(15, 3));
    println!("  10 / 0 = {:?}", calc.divide(10, 0));
    println!();

    // Test text processor
    let processor = SimpleTextProcessor;
    let text = "hello world rust programming";
    println!("üìù Text processing:");
    println!("  Original: '{}'", text);
    println!("  Uppercase: '{}'", processor.uppercase(text));
    println!("  Word count: {}", processor.count_words(text));
    println!("  Reversed: '{}'", processor.reverse(text));
    println!();

    println!("‚úÖ All operations completed successfully!");
    println!("üí° These implementations were generated by AI using your local Ollama instance.");
}
